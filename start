#! /usr/bin/env ruby

require 'json'
require 'open3'
require 'pathname'
require 'fileutils'

class NotRunningError < ArgumentError; end

dir = Pathname.new(
  ENV.fetch(
    'STANDALONE_GAMESCOPE_TMP',
    Pathname.new(File.expand_path(__FILE__)).dirname
  )
)

FileUtils.mkdir_p(dir)

DEFAULT_GAMESCOPE_ARGS = %w[
  -w 2560 -h 1440
  -W 2560 -H 1440
  --fullscreen
  --hdr-enabled
  --nested-refresh 165
  --hdr-sdr-content-nits 100
]

argv = ARGV

if argv.size.zero?
  gamescope_args = ENV['GAMESCOPE_ARGS']&.split(/\s+/) || DEFAULT_GAMESCOPE_ARGS

  ENV['ENABLE_HDR_WSI'] = '1' if gamescope_args.include?('--hdr-enabled')

  File.write(dir.join('pre.env'), JSON.pretty_generate(ENV.to_h))

  ret = Open3.capture2e(
    ENV,
    'gamescope',
    *gamescope_args,
    '--',
    __FILE__,
    'inside'
  )
      # --adaptive-sync
  puts ret
elsif argv[0] == 'inside'
  ENV['STANDALONE_GAMESCOPE_PID'] = Process.pid.to_s

  diff = (ENV.to_h.to_a - JSON.parse(File.read(dir.join('pre.env'))).to_a).to_h

  File.write(dir.join('post.env'), JSON.pretty_generate(diff))

  loop { sleep 1 }
elsif argv[0] == 'game'
  retries = 20
  missing_gamescope_thread = nil

  begin
    diff_env = JSON.parse(File.read(dir.join('post.env'))) rescue {}
    puts "checking pid: #{diff_env.to_json}"
    inside_pid = diff_env['STANDALONE_GAMESCOPE_PID']

    raise NotRunningError unless inside_pid

    pid_exists = File.exist?("/proc/#{inside_pid}")

    raise NotRunningError unless pid_exists

    ENV.merge!(diff_env)
    ENV.delete('WAYLAND_DISPLAY')

    File.write(dir.join('game.env'), JSON.pretty_generate(ENV.to_h))
    File.write(dir.join('game.command'), JSON.pretty_generate(ARGV.drop(1)))

    ret = Open3.capture2e(ENV, *ARGV.drop(1))

    File.write(dir.join('game.out'), ret[0])

    puts ret
  rescue NotRunningError => e
    puts "retrying: #{missing_gamescope_thread}"

    missing_gamescope_thread ||= Thread.new do
      puts "Starting: #{__FILE__}"
      puts Open3.capture2e(__FILE__)
    end

    sleep 0.5
    retries -= 1

    raise unless retries.positive?

    retry
  end

  if missing_gamescope_thread
    Process.kill(:SIGTERM, inside_pid.to_i)
  end
else
  raise ARGV[0]
end

